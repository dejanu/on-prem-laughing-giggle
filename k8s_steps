# update package index: bionic
sudo apt update


# install container runtime: check sudo systemctl status docker
sudo apt install docker.io -y
sudo systemctl enable docker

#swap configuration needs to be disabled. Kubelet will not start if the system has swap enabled
#default behavior of a kubelet is to fail to start if swap memory is detected on a node
#make sure swap is disabled in config files like /etc/fstab to have the change persistent acroos reboots
# disable swap spaces
sudo swapoff -a
sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

# Kubernetes comes from a non-standard repository, download the signing key to ensure the software is authentic
# download the key and store it in a safe place (default is /etc/apt/keyrings/)
sudo mkdir -p -m 755 /etc/apt/keyrings
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

# add repos
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt update


install container runtime ie. containerd
https://kubernetes.io/docs/setup/production-environment/container-runtimes/


install kubeadm, kubelet and kubectl
https://forum.linuxfoundation.org/discussion/864693/the-repository-http-apt-kubernetes-io-kubernetes-xenial-release-does-not-have-a-release-file

sudo apt-get update
sudo apt-get install -y apt-transport-https ca-certificates curl gpg
sudo mkdir -p -m 755 /etc/apt/keyrings
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl
sudo systemctl enable --now kubelet

### Control plane: initialise the Kubernetes cluster on my master node and set up the pod network, using Calico

You must deploy a Container Network Interface (CNI) based Pod network add-on so that your Pods can communicate with each other. 
Cluster DNS (CoreDNS) will not start up before a network is installed.

kubectl create -f https://docs.projectcalico.org/v3.4/getting-started/kubernetes/installation/hosted/calico.yaml